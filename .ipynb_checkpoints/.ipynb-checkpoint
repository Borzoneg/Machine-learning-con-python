{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "\n",
    "class Perceptron(object):\n",
    "    \"\"\"Classe per implementare il perceptron in python\n",
    "\n",
    "    Parametri:\n",
    "        -eta: float\n",
    "            tasso di apprendimento (compreso tra 0.0 e 1.0)\n",
    "        -n_iter: int\n",
    "            i passi di aggiustamento dei pesi che vengono compiuti sul dataset\n",
    "\n",
    "    Attributi:\n",
    "        -w_: array monodimensionale\n",
    "            i pesi dopo essere stati aggiustati \n",
    "        -errors: list\n",
    "            numero di errori in quel passo\n",
    "    \"\"\"\n",
    "def __init__(self, eta=0.01, n_iter=10):\n",
    "    self.eta = eta\n",
    "    self.n_iter = n_iter\n",
    "\n",
    "def fit(self, X, y):\n",
    "    \"\"\"Inserimento dei dati di addestramento\n",
    "    Parametri:\n",
    "        -X: {simile a un array(ad esempio un dataset .csv)}, forma = [nCampioni, nCaratteristiche]\n",
    "            vettore dei dati di addestramento, per caratteristiche si intende i campi che vengono valutati\n",
    "            per ogni campione\n",
    "        -y: {simile a un array(ad esempio un dataset .csv)}, forma = [nCampioni]\n",
    "            array monodimensionale dove mettiamo i risultati\n",
    "    Return:\n",
    "        self: object\n",
    "            ritorna s√® stesso ma addestrato    \n",
    "    \"\"\"\n",
    "    #N.B: GLI ELEMENTI CON '_' SONO PER CONVENZIONE QUELLI NON INIZIALIZZATI DAL COSTRUTTORE\n",
    "    \n",
    "    self.w_ = np.zeros(1 + X.shape[1]) # costruiamo un array di dimensione [nCampioni + 1] pieno di zero per i pesi\n",
    "    self.errors_ = []                  # costruiamo la lista degli errori \n",
    "    \n",
    "    for i in range(self.n_iter):       # ciclo per il numero di passi scelto nella creazione dell'oggetto\n",
    "        errors = 0\n",
    "        \n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
